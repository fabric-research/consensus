// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RequestsPool is an autogenerated mock type for the RequestsPool type
type RequestsPool struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RequestsPool) Close() {
	_m.Called()
}

// Halt provides a mock function with given fields:
func (_m *RequestsPool) Halt() {
	_m.Called()
}

// NextRequests provides a mock function with given fields:
func (_m *RequestsPool) NextRequests() [][]byte {
	ret := _m.Called()

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// Prune provides a mock function with given fields: predicate
func (_m *RequestsPool) Prune(predicate func([]byte) error) {
	_m.Called(predicate)
}

// RemoveRequests provides a mock function with given fields: requestsIDs
func (_m *RequestsPool) RemoveRequests(requestsIDs ...string) {
	_va := make([]interface{}, len(requestsIDs))
	for _i := range requestsIDs {
		_va[_i] = requestsIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Restart provides a mock function with given fields: batching
func (_m *RequestsPool) Restart(batching bool) {
	_m.Called(batching)
}

// Submit provides a mock function with given fields: request
func (_m *RequestsPool) Submit(request []byte) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRequestsPool interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestsPool creates a new instance of RequestsPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestsPool(t mockConstructorTestingTNewRequestsPool) *RequestsPool {
	mock := &RequestsPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
