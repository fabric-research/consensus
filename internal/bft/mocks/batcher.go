// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Batcher is an autogenerated mock type for the Batcher type
type Batcher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Batcher) Close() {
	_m.Called()
}

// Closed provides a mock function with given fields:
func (_m *Batcher) Closed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NextBatch provides a mock function with given fields:
func (_m *Batcher) NextBatch() [][]byte {
	ret := _m.Called()

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *Batcher) Reset() {
	_m.Called()
}

type mockConstructorTestingTNewBatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatcher creates a new instance of Batcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatcher(t mockConstructorTestingTNewBatcher) *Batcher {
	mock := &Batcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
