// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	types "github.com/SmartBFT-Go/consensus/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// SynchronizerMock is an autogenerated mock type for the SynchronizerMock type
type SynchronizerMock struct {
	mock.Mock
}

// Sync provides a mock function with given fields:
func (_m *SynchronizerMock) Sync() types.SyncResponse {
	ret := _m.Called()

	var r0 types.SyncResponse
	if rf, ok := ret.Get(0).(func() types.SyncResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.SyncResponse)
	}

	return r0
}

type mockConstructorTestingTNewSynchronizerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewSynchronizerMock creates a new instance of SynchronizerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSynchronizerMock(t mockConstructorTestingTNewSynchronizerMock) *SynchronizerMock {
	mock := &SynchronizerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
